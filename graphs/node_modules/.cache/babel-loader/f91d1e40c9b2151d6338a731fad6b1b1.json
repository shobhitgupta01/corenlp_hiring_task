{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Tanisha\\\\Documents\\\\corenlp_hiring_task\\\\graphs\\\\src\\\\index.js\";\n\n/************************************************************************************************************************\r\n * Project  : Plot graph by getting data through Flask API\r\n * Author   : Shobhit Gupta\r\n * Date     : 1st May 2020\r\n ************************************************************************************************************************/\n// importing the libraries\nimport React from 'react';\nimport { render } from 'react-dom';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport axios from 'axios';\n\nconst getConfig = mydata => ({\n  chart: {\n    type: 'bar'\n  },\n  title: {\n    text: 'Historic World Population by Region'\n  },\n  subtitle: {\n    text: 'Source: <a href=\"https://en.wikipedia.org/wiki/World_population\">Wikipedia.org</a>'\n  },\n  xAxis: {\n    categories: mydata.labels,\n    //['Africa', 'America', 'Asia', 'Europe', 'Oceania'], //res.labels,//\n    title: {\n      text: null\n    }\n  },\n  yAxis: {\n    min: 0,\n    title: {\n      text: 'Population (millions)',\n      align: 'high'\n    },\n    labels: {\n      overflow: 'justify'\n    }\n  },\n  tooltip: {\n    valueSuffix: ' millions'\n  },\n  plotOptions: {\n    bar: {\n      dataLabels: {\n        enabled: true\n      }\n    }\n  },\n  legend: {\n    layout: 'vertical',\n    align: 'right',\n    verticalAlign: 'top',\n    x: -40,\n    y: 80,\n    floating: true,\n    borderWidth: 1,\n    backgroundColor: Highcharts.defaultOptions.legend.backgroundColor || '#FFFFFF',\n    shadow: true\n  },\n  credits: {\n    enabled: false\n  },\n  series: [{\n    name: 'Year 1800',\n    data: mydata.counts //[107, 31, 635, 203, 2] \n\n  }]\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getData = () => {\n      axios.get('http://localhost:2010/get_data').then(res => {\n        this.setState({\n          dataResults: res.data\n        });\n        console.log(res);\n      }).catch(error => {\n        this.setState({\n          dataResults: {\n            'counts': [0],\n            'labels': ['No data']\n          }\n        });\n      });\n    };\n\n    this.state = {\n      dataResults: {}\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  } // end of componentMount\n\n\n  render() {\n    const {\n      dataResults\n    } = this.state;\n    const chartConfig = getConfig(dataResults);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }, \" This is a chart\"), /*#__PURE__*/React.createElement(HighchartsReact, {\n      highcharts: Highcharts,\n      options: chartConfig,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} //   const App = () => (\n//     <div>\n//       <HighchartsReact highcharts={Highcharts} options={options} />\n//     </div>\n//   );\n\n\nrender( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 10\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["C:/Users/Tanisha/Documents/corenlp_hiring_task/graphs/src/index.js"],"names":["React","render","Highcharts","HighchartsReact","axios","getConfig","mydata","chart","type","title","text","subtitle","xAxis","categories","labels","yAxis","min","align","overflow","tooltip","valueSuffix","plotOptions","bar","dataLabels","enabled","legend","layout","verticalAlign","x","y","floating","borderWidth","backgroundColor","defaultOptions","shadow","credits","series","name","data","counts","App","Component","constructor","props","getData","get","then","res","setState","dataResults","console","log","catch","error","state","componentDidMount","chartConfig","document","getElementById"],"mappings":"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","sourcesContent":["/************************************************************************************************************************\r\n * Project  : Plot graph by getting data through Flask API\r\n * Author   : Shobhit Gupta\r\n * Date     : 1st May 2020\r\n ************************************************************************************************************************/\r\n\r\n // importing the libraries\r\nimport React from 'react';\r\nimport { render } from 'react-dom';\r\nimport Highcharts from 'highcharts';\r\nimport HighchartsReact from 'highcharts-react-official';\r\nimport axios from 'axios'\r\n\r\n\r\nconst getConfig = mydata =>({\r\n    chart: {\r\n        type: 'bar'\r\n    },\r\n    title: {\r\n        text: 'Historic World Population by Region'\r\n    },\r\n    subtitle: {\r\n        text: 'Source: <a href=\"https://en.wikipedia.org/wiki/World_population\">Wikipedia.org</a>'\r\n    },\r\n    xAxis: {\r\n        categories: mydata.labels, //['Africa', 'America', 'Asia', 'Europe', 'Oceania'], //res.labels,//\r\n        title: {\r\n            text: null\r\n        }\r\n    }, \r\n    yAxis: {\r\n        min: 0,\r\n        title: {\r\n            text: 'Population (millions)',\r\n            align: 'high'\r\n        },\r\n        labels: {\r\n            overflow: 'justify'\r\n        }\r\n    },\r\n    tooltip: {\r\n        valueSuffix: ' millions'\r\n    },\r\n    plotOptions: {\r\n        bar: {\r\n            dataLabels: {\r\n                enabled: true\r\n            }\r\n        }\r\n    },\r\n    legend: {\r\n        layout: 'vertical',\r\n        align: 'right',\r\n        verticalAlign: 'top',\r\n        x: -40,\r\n        y: 80,\r\n        floating: true,\r\n        borderWidth: 1,\r\n        backgroundColor:\r\n            Highcharts.defaultOptions.legend.backgroundColor || '#FFFFFF',\r\n        shadow: true\r\n    },\r\n    credits: {\r\n        enabled: false\r\n    },\r\n    series: [{\r\n        name: 'Year 1800',\r\n        data: mydata.counts //[107, 31, 635, 203, 2] \r\n    }]\r\n})\r\n\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n    \r\n    constructor(props) {  \r\n        \r\n        super(props);  \r\n\r\n        this.state = {\r\n            dataResults: {},\r\n          }  \r\n        \r\n    }\r\n\r\n    getData = () => {\r\n        axios.get('http://localhost:2010/get_data')\r\n          .then(res => {\r\n            this.setState({\r\n              dataResults: res.data\r\n            });\r\n            console.log(res)\r\n          })\r\n          .catch(error => {\r\n              this.setState({\r\n                  dataResults : {'counts':[0],'labels':['No data']}\r\n              });\r\n          });\r\n        }\r\n\r\n\r\n        componentDidMount() {\r\n            this.getData();\r\n          }  // end of componentMount\r\n\r\n    render(){\r\n        const { dataResults } = this.state;\r\n        const chartConfig = getConfig(dataResults);\r\n\r\n        return(\r\n            <div>\r\n                <h1> This is a chart</h1>\r\n                <HighchartsReact highcharts={Highcharts} options={chartConfig} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n//   const App = () => (\r\n//     <div>\r\n//       <HighchartsReact highcharts={Highcharts} options={options} />\r\n//     </div>\r\n//   );\r\n\r\n  render(<App />, document.getElementById('root'));"]},"metadata":{},"sourceType":"module"}